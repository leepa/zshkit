#based on http://aperiodic.net/phil/prompt/prompt.txt. thanks phil. 
function precmd {

    local TERMWIDTH
    (( TERMWIDTH = ${COLUMNS} - 1 ))


    ###
    # Truncate the path if it's too long.
    
    PR_FILLBAR=""
    PR_PWDLEN=""
    
    local promptsize=${#${(%):---[%n@%m]---()--}}
    local pwdsize=${#${(%):-%~}}
    
    if [[ "$promptsize + $pwdsize" -gt $TERMWIDTH ]]; then
	    ((PR_PWDLEN=$TERMWIDTH - $promptsize))
    else
	PR_FILLBAR="\${(l.(($TERMWIDTH - ($promptsize + $pwdsize)))..${PR_HBAR}.)}"
    fi
}


setopt extended_glob
preexec () {
    if [[ "$TERM" == "screen" ]]; then
	local CMD=${1[(wr)^(*=*|sudo|-*)]}
	echo -n "\ek$CMD\e\\"
    fi
}


setprompt () {
    ###
    # Need this so the prompt will work.
    setopt prompt_subst
    
    ###
    # See if we can use colors.

    autoload colors zsh/terminfo
    if [[ "$terminfo[colors]" -ge 8 ]]; then
	    colors
    fi
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE BLACK GREY; do
	eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
	eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
	(( count = $count + 1 ))
    done
    PR_NO_COLOUR="%{$terminfo[sgr0]%}"


    ###
    # See if we can use extended characters to look nicer.
    
    typeset -A altchar
    set -A altchar ${(s..)terminfo[acsc]}
    PR_SET_CHARSET="%{$terminfo[enacs]%}"
    PR_SHIFT_IN="%{$terminfo[smacs]%}"
    PR_SHIFT_OUT="%{$terminfo[rmacs]%}"
    PR_HBAR=${altchar[q]:--}
    PR_ULCORNER=${altchar[l]:--}
    PR_LLCORNER=${altchar[m]:--}
    PR_LRCORNER=${altchar[j]:--}
    PR_URCORNER=${altchar[k]:--}

    
    ###
    # Decide if we need to set titlebar text.
    
    case $TERM in
	xterm*)
	    PR_TITLEBAR=$'%{\e]0;%(!.-=*[ROOT]*=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\a%}'
	    ;;
	screen)
	    PR_TITLEBAR=$'%{\e_screen \005 (\005t) | %(!.-=[ROOT]=- | .)%n@%m:%~ | ${COLUMNS}x${LINES} | %y\e\\%}'
	    ;;
	*)
	    PR_TITLEBAR=''
	    ;;
    esac
    
    
    ###
    # Decide whether to set a screen title
    if [[ "$TERM" == "screen" ]]; then
	PR_STITLE=$'%{\ekzsh\e\\%}'
    else
	PR_STITLE=''
    fi

    ###
    # css...
    LINE_COLOR=$PR_GREEN
    PATH_COLOR=$PR_YELLOW
    TIME_COLOR=$PR_GREEN
    ALERT_COLOR="%{${fg[red]}${bg[white]}%}"
    
    #SET UP CLOCK, USER HERE to use [ . kept failing in big assignment - invalid subscript
    CLOCK="["$TIME_COLOR"%*"$LINE_COLOR"]"
    USER="["$USER_COLOR"%n@%m"$LINE_COLOR"]"
    
    SUBSHELL="%(2L.${PR_RED}Â¬ ${PR_NO_COLOUR}.)" #indicate if we in one.
    GIT_PROMPT="\$(git-prompt)"
    #setting it to minimum of 2 to show, since git st returns 1, 
    #which is useless. is it something configd wrong?
    RETURN_CODE_PROMPT="%(2?.$PR_LIGHT_RED%?$LINE_COLOR:.)"

    ###
    # Finally, the prompt.
    PROMPT='$PR_SET_CHARSET$PR_STITLE${(e)PR_TITLEBAR}\
$LINE_COLOR$PR_SHIFT_IN$PR_ULCORNER$LINE_COLOR$PR_HBAR$PR_SHIFT_OUT\
(\
$PATH_COLOR%$PR_PWDLEN<...<%~%<<\
$LINE_COLOR)\
$PR_SHIFT_IN$PR_HBAR$LINE_COLOR$PR_HBAR${(e)PR_FILLBAR}$LINE_COLOR$PR_HBAR$PR_SHIFT_OUT\
$USER\
$PR_SHIFT_IN$PR_HBAR$LINE_COLOR$PR_URCORNER$PR_SHIFT_OUT\

$LINE_COLOR$PR_SHIFT_IN$PR_LLCORNER$LINE_COLOR$PR_HBAR$PR_SHIFT_OUT(\
$RETURN_CODE_PROMPT\
%(!.$PR_RED.$PR_WHITE)$SUBSHELL%#$LINE_COLOR)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_CYAN$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$PR_NO_COLOUR '

    RPROMPT=$GIT_PROMPT
    RPROMPT+='$LINE_COLOR$PR_SHIFT_IN$LINE_COLOR$PR_SHIFT_OUT\
$CLOCK$PR_SHIFT_IN$PR_HBAR$LINE_COLOR$PR_LRCORNER$PR_SHIFT_OUT$PR_NO_COLOUR'


    PS2='$LINE_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$LINE_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT(\
$PR_LIGHT_GREEN%_$LINE_COLOR)$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT\
$LINE_COLOR$PR_SHIFT_IN$PR_HBAR$PR_SHIFT_OUT$PR_NO_COLOUR '
}

setprompt
